<?xml version="1.0" encoding="UTF-8"?>
<web-app
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
    id="WebApp_ID"
    version="4.0"
    metadata-complete="true"
>
    <display-name>JSP_Mapping_20230704</display-name>
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>
    <servlet>
        <!--
          서블릿과 서블릿 매핑이 짝을 이룰수 있도록 같은 이름을 써준다
          Servlet 이름은 아무거나 써도 상관없지만 대부분 연결되는 ...
        -->
        <servlet-name>Login</servlet-name>
        <!-- mapping할 class를 "패키지명.클래스이름" 형식으로 작성 -->
        <servlet-class>servlet.Login</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Login</servlet-name>
        <!-- 클래스 이름 대신 웹 브라우저에서 요청하는 이름 -->
        <url-pattern>/first</url-pattern>
    </servlet-mapping>

    <!-- 서블릿 등록 -->
    <servlet>
        <servlet-name>addServlet1</servlet-name>
        <servlet-class>controller.AddServlet1</servlet-class>
    </servlet>
    <!-- 서블릿 요청과 연결 설정 -->
    <servlet-mapping>
        <servlet-name>addServlet1</servlet-name>
        <url-pattern>/add1</url-pattern>
    </servlet-mapping>
    
    <servlet>
        <servlet-name>addServlet2</servlet-name>
        <servlet-class>controller.AddServlet2</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>addServlet2</servlet-name>
        <url-pattern>/add2</url-pattern>
    </servlet-mapping>
</web-app>

<!--
# XML 파일
- JSP나 Servlet을 위한 설정 파일을 담당하는 역할
- 브라우저가 실행될 때 반드시 거쳐가는 특징을 지니고 있는 설정 파일을 담당한다
- XML 파일을 만들어서 사용 시 다른 자바의 어노테이션들이 제대로 매칭되지 않는 경우가 있다
    metadata-complete="false": 어노테이션 방식 사용
    metadata-complete="true": web.xml 을 이용해서 사용

## 매핑하는 이유
- URL 안에 주소가 자세하게 정의되어있으면 웹 사이트의 구조를 파악할 수 있고 이것은 보안성을 낮게 만든다
- 긴 주소를 간결하게 만들기 위해서 매핑

## 매핑 방법
1. 어노테이션을 통한 매핑
2. XML 파일을 통한 매핑
-->

<!--
# 톰캣 오류

## Server Tomcat v9.0 ... failed to start
1. XML 파일에서 지정한 매핑하고 @WebServlet(이름) 이 겹치지 않는지, 어떤 방식을 사용할 것인지
    어노테이션(false)으로 설정했을 경우 XML과 서블릿 매핑 경로 두 가지 다 참조하기 때문에 충돌이 발생한다
2. 서버 삭제 후 재설정
3. 톰캣 버전 확인
-->

<!--
FrontContoller를 만들어서 모든 요청을 받는 서블릿을 정의하고 등록
URL 매핑 "/" 를 이용해서 하나의 서블릿이 모든 요청을 받음
요청 URL 또는 파라미터로 전달된 명령을 이용하여 처리할 비즈니스 로직 선택
FrontController에서 요청을 분석하고 비즈니스 로직 처리 후 브라우저 또는 적절한 뷰를 선택해서 응답한다

실제 서비스들을 이용해서 처리하는 내용
처리하기 위해서 연결을 시켜주는 것을 핸들러라고 한다
실제 결과를 가지고 보여지는 내용을 action 
-->

<!--
원본


<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" id="WebApp_ID">
    <display-name>JSP_Mapping_20230704</display-name>
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>
</web-app>
-->
